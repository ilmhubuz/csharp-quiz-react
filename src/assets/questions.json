[
    {
        "id": 1,
        "type": "mcq",
        "codeBefore": "```csharp\nbool IsLong(string? s) => s switch\n{\n    null                  => false,\n    { Length: > 5 and < 10 } => true,\n    _                     => false\n};\n```",
        "codeAfter": "",
        "prompt": "Quyidagi chaqiruvlardan qaysi biri `true` natija qaytaradi?",
        "options": [
            {
                "id": "A",
                "option": "`IsLong(\"123456\")`"
            },
            {
                "id": "B",
                "option": "`IsLong(\"1234567890\")`"
            },
            {
                "id": "C",
                "option": "`IsLong(null!)`"
            },
            {
                "id": "D",
                "option": "`IsLong(\"abcd\")`"
            }
        ],
        "answer": [
            "A"
        ]
    },
    {
        "id": 2,
        "type": "mcq",
        "codeBefore": "```csharp\nvoid M(in int x, out int y, params object[] rest) { }\n```",
        "codeAfter": "",
        "prompt": "Quyidagi funksiyani chaqirish usullaridan qaysi biri **noto‘g‘ri**?",
        "options": [
            {
                "id": "A",
                "option": "`M(5, out var y)`"
            },
            {
                "id": "B",
                "option": "`int a = 1; M(a, out a)`"
            },
            {
                "id": "C",
                "option": "`M(in 5, out _, 1, 2)`"
            },
            {
                "id": "D",
                "option": "`M(5, out var y, \"x\", 3)`"
            }
        ],
        "answer": [
            "B"
        ]
    },
    {
        "id": 3,
        "type": "mcq",
        "codeBefore": "```csharp\npublic record Point(int X, int Y);\nvar p = new Point(1,2) with { Y = 3 };\n```",
        "codeAfter": "",
        "prompt": "`Point` haqida qaysi fikr **noto‘g‘ri**?",
        "options": [
            {
                "id": "A",
                "option": "Agar `Point` obyektlarining `X` va `Y` qiymatlari bir xil bo‘lsa, ular teng deb hisoblanadi."
            },
            {
                "id": "B",
                "option": "`record` tipida `ToString()` metodini o‘zgartirish mumkin."
            },
            {
                "id": "C",
                "option": "`with` operatori yangi obyekt yaratadi."
            },
            {
                "id": "D",
                "option": "`Point` uchun parametrsiz konstruktor qo‘shish mumkin."
            }
        ],
        "answer": [
            "D"
        ]
    },
    {
        "id": 4,
        "type": "mcq",
        "codeBefore": "",
        "codeAfter": "",
        "prompt": "`partial` va `file` modifikatorlari haqida qaysi fikr **to‘g‘ri**?",
        "options": [
            {
                "id": "A",
                "option": "`partial class` bir nechta faylda bo‘lishi mumkin."
            },
            {
                "id": "B",
                "option": "`file struct` ni boshqa fayldan chaqirish mumkin."
            },
            {
                "id": "C",
                "option": "Bir tipni bir vaqtning o‘zida `partial` va `file` deb e’lon qilish mumkin."
            },
            {
                "id": "D",
                "option": "`file class` da `private protected` a’zolar bo‘lishi mumkin."
            }
        ],
        "answer": [
            "A"
        ]
    },
    {
        "id": 5,
        "type": "mcq",
        "codeBefore": "```csharp\nvoid F(params int[] nums) { }\n```",
        "codeAfter": "",
        "prompt": "`F(1, 2, new[]{3,4})` chaqirilganda nima sodir bo‘ladi?",
        "options": [
            {
                "id": "A",
                "option": "Bitta massiv `[1,2,3,4]` uzatiladi."
            },
            {
                "id": "B",
                "option": "Ikki argument: `1,2` va massiv `[3,4]` uzatiladi."
            },
            {
                "id": "C",
                "option": "Kompilyatsiya xatosi."
            },
            {
                "id": "D",
                "option": "Ichki massiv bitta element sifatida qabul qilinadi."
            }
        ],
        "answer": [
            "A"
        ]
    },
    {
        "id": 6,
        "type": "mcq",
        "codeBefore": "```csharp\npublic static TResult Combine<TSource, TResult>(TSource a, TSource b)\n    where TSource : ________, IComparable<TSource>\n    where TResult : TSource, new()\n{\n    // ...\n}\n```",
        "codeAfter": "",
        "prompt": "C# 12 da `TSource` uchun arifmetik operatorlardan foydalanish uchun qaysi generic cheklov kerak?",
        "options": [
            {
                "id": "A",
                "option": "`INumber<TSource>`"
            },
            {
                "id": "B",
                "option": "`struct`"
            },
            {
                "id": "C",
                "option": "`IArithmetic<TSource>`"
            },
            {
                "id": "D",
                "option": "`class`"
            }
        ],
        "answer": [
            "A"
        ]
    },
    {
        "id": 7,
        "type": "mcq",
        "codeBefore": "```csharp\npublic static class Extensions\n{\n    public static bool IsEven(this int number)\n    {\n        return (number % 2) == 0;\n    }\n\n    public bool IsOdd(int number)\n    {\n        return (number % 2) != 0;\n    }\n}\n```",
        "codeAfter": "",
        "prompt": "Yuqoridagi kod haqida qaysi fikr **to‘g‘ri**?",
        "options": [
            {
                "id": "A",
                "option": "`IsEven` extension method, `IsOdd` esa oddiy instance method."
            },
            {
                "id": "B",
                "option": "`IsEven` va `IsOdd` ikkalasi ham extension method bo‘lishi mumkin."
            },
            {
                "id": "C",
                "option": "`IsOdd` ni kompilyatsiya uchun `static` qilish kerak."
            },
            {
                "id": "D",
                "option": "`this int` extension methodda ishlatilmaydi."
            }
        ],
        "answer": [
            "C"
        ]
    },
    {
        "id": 8,
        "type": "mcq",
        "codeBefore": "```csharp\nfile interface IHelper\n{\n    void Help();\n}\n\n// In another file\n// class HelperImpl : IHelper { ... }\n```",
        "codeAfter": "",
        "prompt": "Yuqoridagi `IHelper` haqida qaysi fikr **to‘g‘ri**?",
        "options": [
            {
                "id": "A",
                "option": "`IHelper` faqat shu faylda implementatsiya qilinishi mumkin."
            },
            {
                "id": "B",
                "option": "`IHelper` butun assembly bo‘ylab `public` hisoblanadi."
            },
            {
                "id": "C",
                "option": "`IHelper` ni bir nechta faylda implementatsiya qilish mumkin."
            },
            {
                "id": "D",
                "option": "`file interface` noto‘g‘ri sintaksis."
            }
        ],
        "answer": [
            "A"
        ]
    },
    {
        "id": 9,
        "type": "mcq",
        "codeBefore": "```csharp\npublic struct DataPoint\n{\n    public readonly int X;\n    public readonly int Y;\n    public DataPoint(int x, int y) => (X, Y) = (x, y);\n}\n\nvar d1 = new DataPoint(1,2);\nvar d2 = d1;\n\nd2 = new DataPoint(3,4);\nConsole.WriteLine(d1.X + \",\" + d1.Y);\n```",
        "codeAfter": "",
        "prompt": "Natija nima bo‘ladi va sababi?",
        "options": [
            {
                "id": "A",
                "option": "`1,2` – chunki struct value type hisoblanadi."
            },
            {
                "id": "B",
                "option": "`3,4` – chunki d2 o‘zgartirilsa, d1 ham o‘zgaradi."
            },
            {
                "id": "C",
                "option": "`1,2` – chunki readonly fieldlar o‘zgarmaydi."
            },
            {
                "id": "D",
                "option": "Kompilyatsiya xatosi, chunki DataPoint readonly."
            }
        ],
        "answer": [
            "A"
        ]
    },
    {
        "id": 10,
        "type": "mcq",
        "codeBefore": "```csharp\nint Classify(int x) => x switch\n{\n    < 0 => -1,\n    > 0 => 1,\n    _    => 0\n};\n\nvar result = Classify(0);\n```",
        "codeAfter": "",
        "prompt": "`result` ning qiymati nima bo‘ladi?",
        "options": [
            {
                "id": "A",
                "option": "`-1`"
            },
            {
                "id": "B",
                "option": "`0`"
            },
            {
                "id": "C",
                "option": "`1`"
            },
            {
                "id": "D",
                "option": "Kompilyatsiya xatosi"
            }
        ],
        "answer": [
            "B"
        ]
    },
    {
        "id": 11,
        "type": "true_false",
        "codeBefore": "",
        "codeAfter": "",
        "prompt": "Fayl doirasidagi namespace (`namespace MyApp;`) faqat kodni ichkariga suradi, lekin ko‘rinuvchanlikka ta’sir qilmaydi.",
        "answer": "true"
    },
    {
        "id": 12,
        "type": "true_false",
        "codeBefore": "",
        "codeAfter": "",
        "prompt": "`record struct` uchun foydalanuvchi tomonidan yaratilgan parametrsiz konstruktor bo‘lishi mumkin.",
        "answer": "false"
    },
    {
        "id": 13,
        "type": "true_false",
        "codeBefore": "",
        "codeAfter": "",
        "prompt": "`=>` bilan yozilgan expression-bodied member ichida istalgan kod, shu jumladan exception ham bo‘lishi mumkin.",
        "answer": "true"
    },
    {
        "id": 14,
        "type": "true_false",
        "codeBefore": "",
        "codeAfter": "",
        "prompt": "C# `switch` patternlari bir case ichida tip va qiymatni birga tekshirishi mumkin, masalan: `case string s && s.Length > 0:`.",
        "answer": "true"
    },
    {
        "id": 15,
        "type": "true_false",
        "codeBefore": "",
        "codeAfter": "",
        "prompt": "`struct` uchun default parametrsiz konstruktorni o‘zgartirib yoki qayta aniqlab bo‘lmaydi.",
        "answer": "true"
    },
    {
        "id": 16,
        "type": "true_false",
        "codeBefore": "",
        "codeAfter": "",
        "prompt": "C# `switch` expressionlari barcha mumkin bo‘lgan input patternlarni kompilyatsiya vaqtida qamrab olishi shart.",
        "answer": "false"
    },
    {
        "id": 17,
        "type": "true_false",
        "codeBefore": "",
        "codeAfter": "",
        "prompt": "Extension methodlar faqat static class ichida e’lon qilinadi.",
        "answer": "true"
    },
    {
        "id": 18,
        "type": "true_false",
        "codeBefore": "",
        "codeAfter": "",
        "prompt": "Agar chaqirishda nomlangan argumentlardan foydalansangiz, ixtiyoriy parametrlar majburiy parametrlardan oldin kelishi mumkin.",
        "answer": "false"
    },
    {
        "id": 19,
        "type": "true_false",
        "codeBefore": "",
        "codeAfter": "",
        "prompt": "C# da recordlar default bo‘yicha reference type hisoblanadi.",
        "answer": "true"
    },
    {
        "id": 20,
        "type": "true_false",
        "codeBefore": "",
        "codeAfter": "",
        "prompt": "`sealed` metodni undan keyin boshqa klasslarda override qilib bo‘lmaydi.",
        "answer": "true"
    },
    {
        "id": 21,
        "type": "fill",
        "codeWithBlank": "public static T AddAll<T>(T[] values)\n    where T : ________, ________\n{\n    T sum = default!;\n    foreach (var v in values)\n    {\n        sum += v;\n    }\n    return sum;\n}",
        "prompt": "`T` uchun `+` operatori va `default` literalini ishlatish imkonini beruvchi .NET generic math interfeyslarini ikki bo‘sh joyga to‘g‘ri yozing.",
        "answer": "public static T AddAll<T>(T[] values)\n    where T : INumber<T>, IAdditionOperators<T, T, T>\n{\n    T sum = default!;\n    foreach (var v in values)\n    {\n        sum += v;\n    }\n    return sum;\n}"
    },
    {
        "id": 22,
        "type": "fill",
        "codeWithBlank": "file struct Point(int X, int Y)\n{\n    public void Deconstruct(out int x, out int y) => (x, y) = (______, ______);\n}",
        "prompt": "Point — file-scoped positional struct. Deconstruct metodi asosiy konstruktor parametrlarini qaytarishi uchun bo‘sh joylarni to‘g‘ri to‘ldiring.",
        "answer": "file struct Point(int X, int Y)\n{\n    public void Deconstruct(out int x, out int y) => (x, y) = (X, Y);\n}"
    },
    {
        "id": 23,
        "type": "fill",
        "codeWithBlank": "public interface IRepository<T>\n{\n    void Add(T item);\n    T? Get(int id);\n}\n\npublic class Repo<T> : ______\n{\n    void IRepository<T>.Add(T item) { /*...*/ }\n    T? IRepository<T>.Get(int id) { /*...*/ }\n}",
        "prompt": "Repo<T> klassi `IRepository<T>` ni faqat explicit implementatsiya qilishi va `Add` hamda `Get` metodlarini public API dan yashirishi uchun bo‘sh joyni to‘g‘ri to‘ldiring.",
        "answer": "public class Repo<T> : IRepository<T>\n{\n    void IRepository<T>.Add(T item) { /*...*/ }\n    T? IRepository<T>.Get(int id) { /*...*/ }\n}"
    },
    {
        "id": 24,
        "type": "fill",
        "codeWithBlank": "public interface ILogger\n{\n    void Log(string message);\n    void LogError(Exception ex) => ______;\n}",
        "prompt": "`LogError` metodi exception obyektini string ko‘rinishida `Log` ga uzatishi uchun bo‘sh joyni to‘g‘ri to‘ldiring.",
        "answer": "public interface ILogger\n{\n    void Log(string message);\n    void LogError(Exception ex) => Log(ex.ToString());\n}"
    },
    {
        "id": 25,
        "type": "fill",
        "codeWithBlank": "int Classify(object o) => o switch\n{\n    string s when ______ => 1,\n    int i when i % 2 == 0 => 2,\n    null                  => 0,\n    _                     => 3\n};",
        "prompt": "C# 12 pattern sintaksisidan foydalanib, bo‘sh joyga bo‘sh bo‘lmagan stringni aniqlovchi pattern yozing.",
        "answer": "int Classify(object o) => o switch\n{\n    string s when s.Length > 0 => 1,\n    int i when i % 2 == 0 => 2,\n    null                  => 0,\n    _                     => 3\n};"
    },
    {
        "id": 26,
        "type": "error_spotting",
        "codeWithError": "public class Calculator\n{\n    public static T Subtract<T>(T a, T b) where T : IComparable<T>\n    {\n        return a - b;\n    }\n}",
        "prompt": "Generic `Subtract` metodidagi kompilyatsiya xatosini toping va to‘g‘rilang.",
        "answer": "public class Calculator\n{\n    public static T Subtract<T>(T a, T b)\n        where T : ISubtractionOperators<T, T, T>\n    {\n        return a - b;\n    }\n}"
    },
    {
        "id": 27,
        "type": "error_spotting",
        "codeWithError": "interface IShape\n{\n    double Area();\n}\n\npublic class Circle : IShape\n{\n    private readonly double radius;\n    public Circle(double radius) => this.radius = radius;\n    public double area() => Math.PI * radius * radius;\n}",
        "prompt": "`Circle` klassining `IShape` implementatsiyasidagi xatoni toping va to‘g‘rilang.",
        "answer": "interface IShape\n{\n    double Area();\n}\n\npublic class Circle : IShape\n{\n    private readonly double radius;\n    public Circle(double radius) => this.radius = radius;\n    public double Area() => Math.PI * radius * radius;\n}"
    },
    {
        "id": 28,
        "type": "error_spotting",
        "codeWithError": "public struct Rectangle\n{\n    public int Width { get; set; }\n    public int Height { get; set; }\n    public Rectangle(int width, int height)\n    {\n        Width = width;\n    }\n}\n",
        "prompt": "`Rectangle` struct konstruktoridagi xatoni tushuntiring va to‘g‘rilang.",
        "answer": "public struct Rectangle\n{\n    public int Width { get; set; }\n    public int Height { get; set; }\n    public Rectangle(int width, int height)\n    {\n        Width = width;\n        Height = height;\n    }\n}\n"
    },
    {
        "id": 29,
        "type": "error_spotting",
        "codeWithError": "public record Person(string FirstName, string LastName)\n{\n    public string FullName => FirstName + \" \" + LastName;\n    public Person() {}\n}\n",
        "prompt": "Ushbu record C# 12 da kompilyatsiya xatosi beradi. Sababini aniqlang va to‘g‘ri variantini yozing.",
        "answer": "public record Person(string FirstName, string LastName)\n{\n    public string FullName => FirstName + \" \" + LastName;\n    public Person() : this(string.Empty, string.Empty) {}\n}\n"
    },
    {
        "id": 30,
        "type": "error_spotting",
        "codeWithError": "public class Utils\n{\n    public static void LogMessage(string? msg!)\n    {\n        Console.WriteLine(msg);\n    }\n}\n",
        "prompt": "`LogMessage` metodidagi nullable annotation xatosini toping va to‘g‘rilang.",
        "answer": "public class Utils\n{\n    public static void LogMessage(string? msg)\n    {\n        Console.WriteLine(msg);\n    }\n}\n"
    },
    {
        "id": 31,
        "type": "error_spotting",
        "codeWithError": "public abstract class Base\n{\n    public abstract void Save(string data);\n}\n\npublic class FileSaver : Base\n{\n    public void Save(string data)\n    {\n        File.WriteAllText(\"out.txt\", data);\n    }\n}",
        "prompt": "`FileSaver` klassi `Save` metodini to‘g‘ri override qilmayapti. Xatoni tuzating.",
        "answer": "public abstract class Base\n{\n    public abstract void Save(string data);\n}\n\npublic class FileSaver : Base\n{\n    public override void Save(string data)\n    {\n        File.WriteAllText(\"out.txt\", data);\n    }\n}"
    },
    {
        "id": 32,
        "type": "error_spotting",
        "codeWithError": "struct Configuration\n{\n    public string Url { get; init; }\n    public Configuration() { Url = \"\"; }\n}",
        "prompt": "Structda parametrsiz konstruktor bo‘lishi mumkin emas. `Url` ni default qiymat bilan qanday initsializatsiya qilish mumkin?",
        "answer": "struct Configuration\n{\n    public string Url { get; init; } = string.Empty;\n}"
    },
    {
        "id": 33,
        "type": "error_spotting",
        "codeWithError": "public interface ICalc<T>\n{\n    T Add(T a, T b);\n}\n\npublic class Calculator : ICalc<int>\n{\n    public int Add(int a, int b)\n    {\n        return a + b;\n    }\n}",
        "prompt": "`ICalc<T>` interfeysi generic, lekin `Calculator` konkret tipdan foydalanmoqda. Uni generic qilib, to‘g‘ri implementatsiya qiling.",
        "answer": "public interface ICalc<T>\n{\n    T Add(T a, T b);\n}\n\npublic class Calculator<T> : ICalc<T>\n    where T : IAdditionOperators<T, T, T>\n{\n    public T Add(T a, T b)\n    {\n        return a + b;\n    }\n}"
    },
    {
        "id": 34,
        "type": "error_spotting",
        "codeWithError": "public static class StringUtils\n{\n    public static bool IsPalindrome(string s)\n    {\n        return s == new string(s.Reverse().ToArray());\n    }\n\n    public bool IsAnagram(this string s, string t)\n    {\n        return s.OrderBy(c => c).SequenceEqual(t.OrderBy(c => c));\n    }\n}",
        "prompt": "Extension methodlar static bo‘lishi kerak. `IsAnagram` metodini to‘g‘ri yozing.",
        "answer": "public static class StringUtils\n{\n    public static bool IsPalindrome(string s)\n    {\n        return s == new string(s.Reverse().ToArray());\n    }\n\n    public static bool IsAnagram(this string s, string t)\n    {\n        return s.OrderBy(c => c).SequenceEqual(t.OrderBy(c => c));\n    }\n}"
    },
    {
        "id": 35,
        "type": "error_spotting",
        "codeWithError": "public record Person(string FirstName, string LastName)\n{\n    public Person() { }\n}",
        "prompt": "Parametrli record uchun parametrsiz konstruktorni to‘g‘ri yozing, shunda ikkala ism ham bo‘sh string bo‘ladi.",
        "answer": "public record Person(string FirstName, string LastName)\n{\n    public Person() : this(string.Empty, string.Empty) { }\n}"
    },
    {
        "id": 36,
        "type": "output_prediction",
        "snippet": "class A\n{\n    public virtual string F() => \"A\";\n}\nclass B : A\n{\n    public override string F() => base.F() + \"B\";\n}\nclass C : B\n{\n    public new string F() => base.F() + \"C\";\n}\n\nA obj = new C();\nConsole.WriteLine(obj.F());",
        "prompt": "`obj.F()` chaqirilganda natija nima bo‘ladi?",
        "answer": "AB"
    },
    {
        "id": 37,
        "type": "output_prediction",
        "snippet": "interface ILog\n{\n    void Log(string msg) => Console.Write(\"DefaultLog:\");\n}\nclass Logger : ILog { }\n\nvar logger = new Logger();\n((ILog)logger).Log(\"Hello\");",
        "prompt": "`Logger` o‘z Log metodini yozmagan. `((ILog)logger).Log(\"Hello\")` chaqirilganda natija nima bo‘ladi?",
        "answer": "DefaultLog:"
    },
    {
        "id": 38,
        "type": "output_prediction",
        "snippet": "class Base\n{\n    public void Show() => Console.Write(\"Base\");\n    public virtual void Display() => Console.Write(\"BaseDisplay\");\n}\nclass Derived : Base\n{\n    public new void Show() => Console.Write(\"Derived\");\n    public override void Display() => Console.Write(\"DerivedDisplay\");\n}\n\nBase b = new Derived();\nb.Show();\nb.Display();",
        "prompt": "`b.Show()` va `b.Display()` chaqirilganda natija qanday bo‘ladi?",
        "answer": "BaseDerivedDisplay"
    },
    {
        "id": 39,
        "type": "output_prediction",
        "snippet": "var numbers = new[] { 1, 2, 3 };\nint sum = 0;\nforeach (ref readonly var n in numbers)\n{\n    sum += n;\n}\nConsole.WriteLine(sum);",
        "prompt": "`ref readonly` foreach orqali massiv yig‘indisi chiqarilganda natija nima bo‘ladi?",
        "answer": "6"
    },
    {
        "id": 40,
        "type": "output_prediction",
        "snippet": "record R(int X)\n{\n    public override string ToString() => $\"R:{X}\";\n}\n\nvar r1 = new R(5);\nvar r2 = r1 with { X = 7 };\nConsole.WriteLine(r1);\nConsole.WriteLine(r2);",
        "prompt": "`r1` va `r2` uchun ikki qatorda nima chiqadi?",
        "answer": "R:5\nR:7"
    },
    {
        "id": 41,
        "type": "code_writing",
        "prompt": "### 1. Kontaktlar kitobi konsol dasturi\n\nFoydalanuvchi kontakt qo‘shishi va ro‘yxatini ko‘rishi mumkin bo‘lgan konsol dasturini yarating.\n\nHar bir kontaktning `Name`, `PhoneNumber` va `Email` maydonlari bo‘ladi. Kontaktlar uchun `record` tipidan foydalaning.\n\nDastur quyidagilarni qo‘llab-quvvatlashi kerak:\n- Yangi kontakt qo‘shish\n- Barcha kontaktlarni quyidagi formatda chiqarish: `Name - PhoneNumber - Email`\n\nKontaktlar ro‘yxatini xotirada `List<Contact>` orqali saqlang. Buyruqlarni tanlash uchun sikl va `switch` expression ishlating.\n\nAgar kerak bo‘lsa, mantiqni bo‘lish uchun `partial` classdan foydalaning.",
        "examples": [
            "Buyruq kiriting (add/list/exit): add\nIsm kiriting: Alice\nTelefon kiriting: 9981234567\nEmail kiriting: alice@mail.com\nBuyruq kiriting (add/list/exit): list\nAlice - 9981234567 - alice@mail.com\nBuyruq kiriting (add/list/exit): exit"
        ]
    },
    {
        "id": 42,
        "type": "code_writing",
        "prompt": "### 2. Polimorfizm yordamida shakllar yuzasini hisoblash\n\nTurli shakllarning yuzasini hisoblaydigan konsol dasturini yozing.\n\n- `Shape` nomli abstract class yarating va unda abstract `double GetArea()` metodini e’lon qiling.\n- Kamida 2 ta voris class yarating: `Circle` va `Rectangle`.\n- `GetArea()` metodini `override` qilib yozing.\n- Foydalanuvchidan qaysi shakl yuzasini hisoblashni so‘rang.\n\n`switch` expression va `virtual` metodlardan to‘g‘ri foydalaning.",
        "examples": [
            "Shakl kiriting (circle/rectangle): circle\nRadius kiriting: 2.5\nYuza: 19.63",
            "Shakl kiriting (circle/rectangle): rectangle\nKenglik kiriting: 4\nBalandlik kiriting: 3\nYuza: 12"
        ]
    },
    {
        "id": 43,
        "type": "code_writing",
        "prompt": "### 3. Extension method yordamida telefon raqamini tekshirish\n\n`IsValidUzPhone(this string phone)` extension metodini yarating. U quyidagilarni tekshiradi:\n- Satr `998` bilan boshlanishi kerak\n- Va aniq 12 ta raqamdan iborat bo‘lishi kerak\n\nKonsol dasturida foydalanuvchidan raqam kiriting, tekshirib, `Valid` yoki `Invalid` deb chiqaring.\n\n`this string` extension sintaksisini to‘g‘ri ishlating va kodni `static` classda joylashtiring.",
        "examples": [
            "Telefon raqamini kiriting: 998901234567\nValid",
            "Telefon raqamini kiriting: 9901234567\nInvalid",
            "Telefon raqamini kiriting: 998123\nInvalid"
        ]
    },
    {
        "id": 44,
        "type": "code_writing",
        "prompt": "### 4. `record struct` yordamida koordinata tahlili\n\n`Point` nomli `record struct` yarating, unda `X` va `Y` property bo‘lsin.\n\n`Classify(Point p)` metodini yozing, u quyidagilarni qaytaradi:\n- Agar X va Y 0 bo‘lsa: `\"Origin\"`\n- Agar Y 0 bo‘lsa: `\"X-axis\"`\n- Agar X 0 bo‘lsa: `\"Y-axis\"`\n- Aks holda: `\"Quadrant\"`\n\nPattern matching va switch expressionlardan foydalaning.",
        "examples": [
            "X ni kiriting: 0\nY ni kiriting: 0\nJoylashuv: Origin",
            "X ni kiriting: 5\nY ni kiriting: 0\nJoylashuv: X-axis",
            "X ni kiriting: 3\nY ni kiriting: 4\nJoylashuv: Quadrant"
        ]
    },
    {
        "id": 45,
        "type": "code_writing",
        "prompt": "### 5. `params` va `switch` yordamida oddiy kalkulyator\n\n`Calculate(string operation, params double[] values)` metodini yarating. U quyidagilarni qo‘llab-quvvatlashi kerak:\n- `sum`, `average`, `max`, `min`\n- `switch` expressiondan foydalaning\n- Natijani double ko‘rinishida qaytaring\n\nBo‘sh input kabi holatlarni ham to‘g‘ri ishlang.\n\nFoydalanuvchi operatsiya va sonlarni kiritadigan konsol dasturini yozing.",
        "examples": [
            "Operatsiyani kiriting: sum\nQiymatlarni probel bilan ajratib kiriting: 3 5 2\nNatija: 10",
            "Operatsiyani kiriting: average\nQiymatlarni probel bilan ajratib kiriting: 4 8\nNatija: 6"
        ]
    }
]
{
  "metadata": {
    "categoryId": 6,
    "id": "linq-funksional-dasturlash",
    "title": "Linq Funksional Dasturlash",
    "description": "LINQ so'rovlari, lambda ifodalar, va funksional dasturlash yondashuvlari.",
    "icon": "ðŸ”—"
  },
  "questions": [
    {
      "id": 1,
      "type": "mcq",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "basic linq operations"
      },
      "codeBefore": "```csharp\nvar numbers = new[] { 1, 2, 3, 4, 5, 6 };\nvar result = numbers\n    .Where(x => x % 2 == 0)\n    .Select(x => x * x)\n    .Sum();\n```",
      "codeAfter": "",
      "prompt": "LINQ chain operatsiyalari: juft sonlarni tanlab, kvadratga ko'tarib, yig'indisini hisoblamoqda. `result` nima bo'ladi?",
      "options": [
        {
          "id": "A",
          "option": "`56` - (2Â² + 4Â² + 6Â² = 4 + 16 + 36)"
        },
        {
          "id": "B",
          "option": "`36` - faqat 6Â²"
        },
        {
          "id": "C",
          "option": "`91` - barcha sonlarning kvadrati yig'indisi"
        },
        {
          "id": "D",
          "option": "`12` - juft sonlar yig'indisi"
        }
      ],
      "answer": [
        "A"
      ],
      "explanation": "Where(x => x % 2 == 0): [2,4,6] â†’ Select(x => x * x): [4,16,36] â†’ Sum(): 56"
    },
    {
      "id": 2,
      "type": "mcq",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "grouping operations"
      },
      "codeBefore": "```csharp\nvar students = new[]\n{\n    new { Name = \"Ali\", Grade = 85 },\n    new { Name = \"Bobur\", Grade = 92 },\n    new { Name = \"Zara\", Grade = 78 }\n};\nvar result = students\n    .GroupBy(s => s.Grade >= 80 ? \"High\" : \"Low\")\n    .ToDictionary(g => g.Key, g => g.Count());\n```",
      "codeAfter": "",
      "prompt": "Students ni grade bo'yicha grouping qilib, har guruhda nechta student borligini hisoblamoqda. `result` nima?",
      "options": [
        {
          "id": "A",
          "option": "`{ \"High\": 2, \"Low\": 1 }` - 80+ va 80- bo'yicha guruhlash"
        },
        {
          "id": "B",
          "option": "`{ \"High\": 1, \"Low\": 2 }` - teskari hisoblash"
        },
        {
          "id": "C",
          "option": "`{ \"85\": 1, \"92\": 1, \"78\": 1 }` - har grade bo'yicha"
        },
        {
          "id": "D",
          "option": "Exception - anonymous type bilan muammo"
        }
      ],
      "answer": [
        "A"
      ],
      "explanation": "GroupBy key: Gradeâ‰¥80 ? \"High\" : \"Low\" â†’ Ali,Bobur: High(2), Zara: Low(1)"
    },
    {
      "id": 3,
      "type": "mcq",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "set operations"
      },
      "codeBefore": "```csharp\nvar list1 = new[] { 1, 2, 3, 4 };\nvar list2 = new[] { 3, 4, 5, 6 };\nvar union = list1.Union(list2).OrderBy(x => x);\nvar intersect = list1.Intersect(list2);\nConsole.WriteLine($\"{union.Count()}, {intersect.Count()}\");\n```",
      "codeAfter": "",
      "prompt": "Set operatsiyalari: `Union` barcha unique elementlar, `Intersect` umumiy elementlar. Natija?",
      "options": [
        {
          "id": "A",
          "option": "`6, 2` - union: {1,2,3,4,5,6}, intersect: {3,4}"
        },
        {
          "id": "B",
          "option": "`8, 4` - barcha elementlar va duplicate"
        },
        {
          "id": "C",
          "option": "`4, 2` - faqat birinchi array"
        },
        {
          "id": "D",
          "option": "`6, 0` - intersection yo'q"
        }
      ],
      "answer": [
        "A"
      ],
      "explanation": "Union: {1,2,3,4,5,6} unique = 6 elements, Intersect: {3,4} common = 2 elements"
    },
    {
      "id": 4,
      "type": "mcq",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "sorting operations"
      },
      "codeBefore": "```csharp\nvar data = new[] { \"apple\", \"banana\", \"apricot\", \"cherry\" };\nvar result = data\n    .Where(x => x.StartsWith(\"a\"))\n    .OrderByDescending(x => x.Length)\n    .ThenBy(x => x)\n    .First();\n```",
      "codeAfter": "",
      "prompt": "Multi-level sorting: avval uzunlik bo'yicha kamayish, keyin alfavit bo'yicha o'sish. Birinchi element?",
      "options": [
        {
          "id": "A",
          "option": "`\"apricot\"` - eng uzun 'a' bilan boshlanuvchi"
        },
        {
          "id": "B",
          "option": "`\"apple\"` - alfabetik jihatdan birinchi"
        },
        {
          "id": "C",
          "option": "`\"banana\"` - eng uzun"
        },
        {
          "id": "D",
          "option": "Exception - 'a' bilan boshlanuvchi yo'q"
        }
      ],
      "answer": [
        "A"
      ],
      "explanation": "Where('a'): [apple,apricot] â†’ OrderByDescending(length): apricot(7), apple(5) â†’ First(): apricot"
    },
    {
      "id": 5,
      "type": "mcq",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "query syntax"
      },
      "codeBefore": "```csharp\nvar query = from n in Enumerable.Range(1, 10)\n            let square = n * n\n            where square % 2 == 0\n            select new { Number = n, Square = square };\nvar result = query.Take(3).Sum(x => x.Square);\n```",
      "codeAfter": "",
      "prompt": "Query syntax: `let` keyword va deferred execution. Birinchi 3 ta juft kvadratning yig'indisi?",
      "options": [
        {
          "id": "A",
          "option": "`56` - (4 + 16 + 36 from 2Â², 4Â², 6Â²)"
        },
        {
          "id": "B",
          "option": "`30` - (1Â² + 2Â² + 3Â² ning jufti)"
        },
        {
          "id": "C",
          "option": "`20` - (2 + 4 + 6)Â²"
        },
        {
          "id": "D",
          "option": "`84` - barcha juft kvadratlar"
        }
      ],
      "answer": [
        "A"
      ],
      "explanation": "Range(1,10) â†’ let square â†’ where even squares: [4,16,36,64,100] â†’ Take(3): [4,16,36] â†’ Sum: 56"
    },
    {
      "id": 6,
      "type": "true_false",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "operation semantics"
      },
      "codeBefore": "",
      "codeAfter": "",
      "prompt": "LINQ da `Where().Select()` chain `Select().Where()` bilan bir xil natija beradi, faqat performance farq qilishi mumkin.",
      "answer": "false",
      "explanation": "Yolg'on. Where() va Select() commutative emas. Where(condition).Select(transform) â‰  Select(transform).Where(condition) chunki condition original value lar uchun, transform uchun emas."
    },
    {
      "id": 7,
      "type": "true_false",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "execution behavior"
      },
      "codeBefore": "",
      "codeAfter": "",
      "prompt": "`IEnumerable<T>` da LINQ operatsiyalari deferred execution qo'llaydi, ya'ni `ToList()` chaqirilgunga qadar execute bo'lmaydi.",
      "answer": "true",
      "explanation": "To'g'ri. LINQ operatsiyalari deferred (lazy) execution ishlatadi. Query definition vaqtida execute bo'lmaydi, balki enumeration (ToList, foreach, Count) paytida execute bo'ladi."
    },
    {
      "id": 8,
      "type": "true_false",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "grouping operations"
      },
      "codeBefore": "",
      "codeAfter": "",
      "prompt": "`GroupBy()` metodi natijasi `IGrouping<TKey, TElement>` tipidagi elementlardan iborat `IEnumerable` qaytaradi.",
      "answer": "true",
      "explanation": "To'g'ri. GroupBy() natijasi IEnumerable<IGrouping<TKey, TElement>> qaytaradi. Har bir IGrouping bir group ni represents qiladi va Key property va elements ga access beradi."
    },
    {
      "id": 9,
      "type": "true_false",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "element selection"
      },
      "codeBefore": "",
      "codeAfter": "",
      "prompt": "`First()` va `FirstOrDefault()` farqi shundaki, birinchisi exception beradi, ikkinchisi default qiymat qaytaradi.",
      "answer": "true",
      "explanation": "To'g'ri. First() bo'sh collection yoki condition match qilmaydigan holda InvalidOperationException beradi. FirstOrDefault() default(T) qaytaradi."
    },
    {
      "id": 10,
      "type": "true_false",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "provider support"
      },
      "codeBefore": "",
      "codeAfter": "",
      "prompt": "LINQ query syntax faqat `IEnumerable<T>` bilan ishlaydi, `IQueryable<T>` bilan ishlatib bo'lmaydi.",
      "answer": "false",
      "explanation": "Yolg'on. LINQ query syntax IQueryable<T> bilan ham ishlaydi. Bu LINQ to SQL, Entity Framework va boshqa query provider lar uchun juda muhim."
    },
    {
      "id": 11,
      "type": "fill",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "basic linq chain"
      },
      "codeWithBlank": "var numbers = new[] { 1, 2, 3, 4, 5 };\nvar result = numbers\n    .________(x => x > 2)\n    .________(x => x * 2)\n    .________();\n// Result should be [6, 8, 10]",
      "prompt": "LINQ chain: 2 dan katta sonlarni filterlash, 2 ga ko'paytirish, array ga aylantirish.",
      "answer": "var numbers = new[] { 1, 2, 3, 4, 5 };\nvar result = numbers\n    .Where(x => x > 2)\n    .Select(x => x * 2)\n    .ToArray();\n// Result should be [6, 8, 10]",
      "explanation": "Where(filtering) â†’ Select(transformation) â†’ ToArray(materialization) chain pattern."
    },
    {
      "id": 12,
      "type": "fill",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "grouping and aggregation"
      },
      "codeWithBlank": "var words = new[] { \"hello\", \"world\", \"linq\", \"query\" };\nvar grouped = words\n    .________(w => w.Length)\n    .________(g => g.Key, g => g.______());\n// Group by length, then create dictionary with counts",
      "prompt": "So'zlarni uzunlik bo'yicha guruhlab, har guruhda nechta element borligini dictionary sifatida qaytaring.",
      "answer": "var words = new[] { \"hello\", \"world\", \"linq\", \"query\" };\nvar grouped = words\n    .GroupBy(w => w.Length)\n    .ToDictionary(g => g.Key, g => g.Count());\n// Group by length, then create dictionary with counts",
      "explanation": "GroupBy(length) creates groups â†’ ToDictionary(key, count) creates Dictionary<int, int>."
    },
    {
      "id": 13,
      "type": "fill",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "pagination and filtering"
      },
      "codeWithBlank": "var source = Enumerable.Range(1, 100);\nvar result = source\n    .________(10)        // Skip first 10\n    .________(5)         // Take next 5\n    .________(x => x % 2 == 1)  // Only odd numbers\n    .Sum();",
      "prompt": "Pagination va filtering: birinchi 10 tani o'tkazib yuborish, keyingi 5 tani olish, faqat toqlarini yig'ish.",
      "answer": "var source = Enumerable.Range(1, 100);\nvar result = source\n    .Skip(10)        // Skip first 10\n    .Take(5)         // Take next 5\n    .Where(x => x % 2 == 1)  // Only odd numbers\n    .Sum();",
      "explanation": "Skip(10) â†’ Take(5) â†’ Where(odd) â†’ Sum(): pagination keyin filtering, oxirida aggregation."
    },
    {
      "id": 14,
      "type": "fill",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "quantifier methods"
      },
      "codeWithBlank": "var people = new[]\n{\n    new { Name = \"Ali\", Age = 25 },\n    new { Name = \"Sara\", Age = 30 }\n};\nvar result = people\n    .________(p => p.Age > 20)\n    .________(p => ________);\n// Check if any person older than 20, then check if all are older than 18",
      "prompt": "Quantifier methods: biror kishi 20 yoshdan katta bo'lsa, barcha kishilar 18 dan katta ekanligini tekshiring.",
      "answer": "var people = new[]\n{\n    new { Name = \"Ali\", Age = 25 },\n    new { Name = \"Sara\", Age = 30 }\n};\nvar hasOlder = people.Any(p => p.Age > 20);\nvar allAdults = people.All(p => p.Age > 18);\n// Check if any person older than 20, then check if all are older than 18",
      "explanation": "Any(condition) checks existence, All(condition) checks universal truth. Separate variables for clarity."
    },
    {
      "id": 15,
      "type": "fill",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "join operations"
      },
      "codeWithBlank": "var customers = new[] { \"Alice\", \"Bob\", \"Charlie\" };\nvar orders = new[] { \"Alice\", \"Alice\", \"Bob\", \"David\" };\nvar result = customers\n    .________(orders, c => c, o => o, (c, orderGroup) => \n        new { Customer = c, OrderCount = orderGroup.________ });\n// Group join to count orders per customer",
      "prompt": "Group join: har bir customer uchun order sonini hisoblash. Ba'zi customerlarning orderi yo'q bo'lishi mumkin.",
      "answer": "var customers = new[] { \"Alice\", \"Bob\", \"Charlie\" };\nvar orders = new[] { \"Alice\", \"Alice\", \"Bob\", \"David\" };\nvar result = customers\n    .GroupJoin(orders, c => c, o => o, (c, orderGroup) => \n        new { Customer = c, OrderCount = orderGroup.Count() });\n// Group join to count orders per customer",
      "explanation": "GroupJoin() creates left join with grouped results. Count() calculates orders per customer, including zero."
    },
    {
      "id": 16,
      "type": "error_spotting",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "deferred execution"
      },
      "codeWithError": "var numbers = new[] { 1, 2, 3, 4, 5 };\nvar query = numbers.Where(x => x > 2);\nnumbers[0] = 10;\nvar result = query.ToList();\nConsole.WriteLine(result.Count);",
      "prompt": "Deferred execution muammosi: query yaratilgandan keyin source data o'zgardi. Natija qanday bo'ladi?",
      "answer": "var numbers = new[] { 1, 2, 3, 4, 5 };\nvar query = numbers.Where(x => x > 2);\n// query hali execute bo'lmagan (deferred)\nnumbers[0] = 10;  // source data o'zgardi\nvar result = query.ToList();  // endi execute bo'ladi: [10, 3, 4, 5]\nConsole.WriteLine(result.Count);  // 4",
      "explanation": "Deferred execution: query creation vaqtida execute bo'lmaydi, ToList() chaqirilganda execute bo'ladi va o'zgartrilgan source data ishlatiladi."
    },
    {
      "id": 17,
      "type": "error_spotting",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "pipeline correctness"
      },
      "codeWithError": "var data = new[] { 1, 2, 3 };\nvar result = data\n    .Select(x => x * 2)\n    .Where(x => x > 3)\n    .First();\n// Should get first element > 3 after doubling",
      "prompt": "LINQ chain mantiqan to'g'ri, lekin qiymatlarni tekshirib ko'ring. 4 dan katta birinchi element topiladi?",
      "answer": "var data = new[] { 1, 2, 3 };\nvar result = data\n    .Select(x => x * 2)    // [2, 4, 6]\n    .Where(x => x > 3)     // [4, 6]\n    .First();              // 4\n// Natija: 4 (to'g'ri ishlaydi)",
      "explanation": "Bu 'trick question' - kod aslida to'g'ri ishlaydi. Select(x2): [2,4,6] â†’ Where(>3): [4,6] â†’ First(): 4."
    },
    {
      "id": 18,
      "type": "error_spotting",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "enumeration safety"
      },
      "codeWithError": "var items = new List<int> { 1, 2, 3, 4, 5 };\nforeach (var item in items.Where(x => x % 2 == 0))\n{\n    items.Remove(item);\n}\nConsole.WriteLine(items.Count);",
      "prompt": "Collection modification during enumeration xatosi. LINQ query execute bo'layotganda source collection o'zgartirilmoqda.",
      "answer": "var items = new List<int> { 1, 2, 3, 4, 5 };\n// To'g'ri yondashuv: avval natijani materialize qiling\nvar toRemove = items.Where(x => x % 2 == 0).ToList();\nforeach (var item in toRemove)\n{\n    items.Remove(item);\n}\nConsole.WriteLine(items.Count);",
      "explanation": "Collection modification during enumeration InvalidOperationException beradi. Avval ToList() qilib materialize qilish kerak."
    },
    {
      "id": 19,
      "type": "error_spotting",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "element selection"
      },
      "codeWithError": "var numbers = new[] { 1, 2, 3 };\nvar result = numbers\n    .GroupBy(x => x % 2)\n    .Select(g => g.Sum())\n    .Single();",
      "prompt": "`Single()` method faqat bitta element bo'lgan collection uchun ishlatiladi. Bu yerda nechta group bor?",
      "answer": "var numbers = new[] { 1, 2, 3 };\nvar result = numbers\n    .GroupBy(x => x % 2)    // 2 ta group: {0: [2], 1: [1,3]}\n    .Select(g => g.Sum())   // [2, 4]\n    .ToArray();             // Single() o'rniga ToArray() yoki First()/Last()\n// Single() exception beradi chunki 2 ta element bor",
      "explanation": "GroupBy(x % 2) 2 ta group yaratadi (even va odd). Single() faqat 1 ta element kutadi, 2 ta bo'lgani uchun exception beradi."
    },
    {
      "id": 20,
      "type": "error_spotting",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "null safety"
      },
      "codeWithError": "var words = new[] { \"apple\", \"banana\", null, \"cherry\" };\nvar result = words\n    .Where(w => w.Length > 5)\n    .Count();",
      "prompt": "Null reference exception: array da `null` element bor va `Length` property access qilinmoqda.",
      "answer": "var words = new[] { \"apple\", \"banana\", null, \"cherry\" };\nvar result = words\n    .Where(w => w != null && w.Length > 5)  // Null check kerak\n    .Count();\n// Yoki: .Where(w => w?.Length > 5)",
      "explanation": "Null element da Length property access NullReferenceException beradi. Null check yoki safe navigation operator kerak."
    },
    {
      "id": 21,
      "type": "output_prediction",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "selectmany operations"
      },
      "snippet": "var numbers = new[] { 1, 2, 3, 4, 5 };\nvar result = numbers\n    .SelectMany(x => Enumerable.Repeat(x, x))\n    .Sum();\nConsole.WriteLine(result);",
      "prompt": "`SelectMany` har raqamni o'sha raqam marta takrorlaydi. Masalan, 3 ni 3 marta: [3,3,3]. Yig'indi?",
      "answer": "30",
      "explanation": "1â†’[1], 2â†’[2,2], 3â†’[3,3,3], 4â†’[4,4,4,4], 5â†’[5,5,5,5,5] flattenâ†’[1,2,2,3,3,3,4,4,4,4,5,5,5,5,5] Sum=30"
    },
    {
      "id": 22,
      "type": "output_prediction",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "character analysis"
      },
      "snippet": "var data = \"hello world\";\nvar result = data\n    .Where(c => char.IsLetter(c))\n    .GroupBy(c => c)\n    .OrderByDescending(g => g.Count())\n    .First()\n    .Key;\nConsole.WriteLine(result);",
      "prompt": "String dagi eng ko'p uchraydigan harfni topish. `hello world` da qaysi harf eng ko'p?",
      "answer": "l",
      "explanation": "\"hello world\" letters: h,e,l,l,o,w,o,r,l,d â†’ 'l' appears 3 times (most frequent) â†’ Key='l'"
    },
    {
      "id": 23,
      "type": "output_prediction",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "zip operations"
      },
      "snippet": "var list1 = new[] { 1, 2, 3 };\nvar list2 = new[] { 2, 3, 4 };\nvar result = list1.Zip(list2, (a, b) => a + b).ToArray();\nConsole.WriteLine(string.Join(\", \", result));",
      "prompt": "`Zip` method ikki collection elementlarini juftlab birlashtiradi. Har juftikning yig'indisi?",
      "answer": "3, 5, 7",
      "explanation": "Zip pairs: (1,2)â†’3, (2,3)â†’5, (3,4)â†’7 â†’ string.Join(\", \") â†’ \"3, 5, 7\""
    },
    {
      "id": 24,
      "type": "output_prediction",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "conditional operations"
      },
      "snippet": "var numbers = new[] { 5, 2, 8, 1, 9 };\nvar result = numbers\n    .TakeWhile(x => x != 8)\n    .Concat(numbers.SkipWhile(x => x != 8).Skip(1))\n    .ToArray();\nConsole.WriteLine(string.Join(\", \", result));",
      "prompt": "8 raqamini olib tashlash: 8 gacha olib, 8 dan keyingilarni olib, birlashtirish. Natija?",
      "answer": "5, 2, 1, 9",
      "explanation": "TakeWhile(â‰ 8): [5,2] + SkipWhile(â‰ 8).Skip(1): skip [5,2,8], then skip 1 more â†’ [1,9] = [5,2,1,9]"
    },
    {
      "id": 25,
      "type": "output_prediction",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "nested flattening"
      },
      "snippet": "var ranges = new[] { \n    Enumerable.Range(1, 3), \n    Enumerable.Range(4, 2) \n};\nvar flattened = ranges.SelectMany(r => r).Sum();\nConsole.WriteLine(flattened);",
      "prompt": "`SelectMany` nested IEnumerable larni flatten qiladi. Range(1,3)=[1,2,3], Range(4,2)=[4,5]. Yig'indi?",
      "answer": "15",
      "explanation": "Range(1,3)â†’[1,2,3], Range(4,2)â†’[4,5] â†’ SelectMany flattenâ†’[1,2,3,4,5] â†’ Sum=15"
    },
    {
      "id": 26,
      "type": "code_writing",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "data analysis projects"
      },
      "prompt": "### LINQ ma'lumotlar tahlili dasturi\n\nStudent ma'lumotlari bilan ishlaydigan konsol dasturini yozing.\n\n`Student` record yarating: `Name`, `Age`, `Grade`, `Subject` maydonlari bilan.\n\nQuyidagi LINQ operatsiyalarini implement qiling:\n- Barcha studentlarni grade bo'yicha guruhlab, har guruhda nechta student borligini chiqarish\n- Eng yosh va eng katta yoshdagi studentlarni topib chiqarish\n- Ma'lum subject bo'yicha o'rtacha grade ni hisoblash\n- Grade 80+ bo'lgan studentlarni name bo'yicha tartiblash\n\nDeferred execution va immediate execution farqini ko'rsating.",
      "examples": [
        "Students by grade groups:\nA: 3 students\nB: 5 students\n\nAge range: Min=18, Max=25\nMath average grade: 87.5"
      ]
    },
    {
      "id": 27,
      "type": "code_writing",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "text analysis projects"
      },
      "prompt": "### LINQ bilan matn tahlili\n\nMatn faylini tahlil qiladigan dastur yozing (yoki hardcoded string ishlating).\n\nQuyidagi funksiyalarni LINQ bilan implement qiling:\n- Eng uzun so'zni topish\n- Har harfning necha marta uchrashini hisoblash\n- Palindrom so'zlarni topish  \n- So'zlarni uzunlik bo'yicha guruhlab, har guruhdan eng kichik alfabetik tartibdagisini olish\n\nQuery syntax va method syntax ikkalasidan ham foydalaning.\n\n`SelectMany`, `GroupBy`, `OrderBy`, `Where` metodlarini ishlating.",
      "examples": [
        "Text: \"hello world level deed\"\nLongest word: world (5 letters)\nPalindromes: level, deed\nLetter 'l' appears 3 times"
      ]
    },
    {
      "id": 28,
      "type": "code_writing",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "business logic projects"
      },
      "prompt": "### LINQ bilan e-commerce ma'lumotlari\n\n`Product`, `Order`, `Customer` recordlarini yarating.\n\nQuyidagi business logikani LINQ bilan yozing:\n- Eng ko'p sotilgan 5 ta mahsulot\n- Har bir customer ning jami xarid summasi\n- Oylik sotuvlar statistikasi (group by month)\n- Hech narsa sotib olmagan customerlar ro'yxati\n\n`Join`, `GroupJoin`, `Aggregate`, `Sum` metodlaridan foydalaning.\n\nNull safety va edge caselarni handle qiling (bo'sh collections, null values).",
      "examples": [
        "Top products:\n1. Laptop - 15 orders\n2. Phone - 12 orders\n\nCustomer spending:\nAli: $1,250\nSara: $890"
      ]
    },
    {
      "id": 29,
      "type": "code_writing",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "performance optimization"
      },
      "prompt": "### LINQ Performance Comparison\n\nKatta collection lar bilan ishlash uchun performance test dasturini yozing.\n\nQuyidagilarni taqqoslang:\n- `Where().Count()` vs `Count(predicate)`\n- `Where().First()` vs `First(predicate)`  \n- `ToList().Where()` vs `Where().ToList()`\n- Deferred vs Immediate execution\n\n`Stopwatch` ishlatib, execution time ni o'lchang.\n\n1 million elementli `List<int>` yarating va turli LINQ operatsiyalarini test qiling.\n\nNatijalarni console ga formatted holda chiqaring.",
      "examples": [
        "Performance Test Results:\nWhere().Count(): 145ms\nCount(predicate): 98ms\n\nDeferred query creation: 0ms\nImmediate execution: 234ms"
      ]
    },
    {
      "id": 30,
      "type": "code_writing",
      "metadata": {
        "category": "linq-funksional-dasturlash",
        "subcategory": "extension methods"
      },
      "prompt": "### Custom LINQ Extension Methods\n\nO'zingizning LINQ extension methodlarini yarating:\n\n- `Batch<T>(this IEnumerable<T> source, int size)` - elementlarni chunk larga bo'lish\n- `DistinctBy<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector)` - key bo'yicha unique\n- `ForEach<T>(this IEnumerable<T> source, Action<T> action)` - har elementga action apply qilish\n- `IsEmpty<T>(this IEnumerable<T> source)` - collection bo'sh ekanligini tekshirish\n\nHar bir extension method uchun:\n- Null checking\n- Deferred execution (kerak bo'lsa)\n- `yield return` ishlatish\n- Generic constraints (kerak bo'lsa)\n\nTest kodini ham yozing.",
      "examples": [
        "var numbers = Enumerable.Range(1, 10);\nvar batches = numbers.Batch(3).ToList();\n// Result: [[1,2,3], [4,5,6], [7,8,9], [10]]\n\nvar people = GetPeople();\nvar unique = people.DistinctBy(p => p.Email);"
      ]
    }
  ]
}